#include<stdio.h>
#include <stdlib.h>
int q[20],front=-1,rear=-1,adj[20][20],vis[20];

int delete();
void add(int item);
void bfs(int s,int n);
void dfs(int s,int n);
void main(){
int n,i,s,ch,j,E,v1,v2;
char c,dummy;
printf("ENTER THE NUMBER VERTICES ");
scanf("%d",&n);
printf("Enter the no of edges:");
scanf("%d",&E);
for(i=0;i<n;i++){
        for(j=0;j<n;j++)
            adj[i][j]=0;}
//creating edges    
for(i=0;i<E;i++){
    printf("Enter the edges (format: V1 V2) : ");
    scanf("%d%d",&v1,&v2);
    adj[v1][v2]=1;
    adj[v2][v1]=1;}
printf("THE ADJACENCY MATRIX IS\n");
for(i=0;i<n;i++){
for(j=0;j<n;j++){
printf(" %d",adj[i][j]);}
printf("\n");}
do{
for(i=0;i<n;i++)
vis[i]=0;
printf("\nMENU");
printf("\n1.B.F.S");
printf("\n2.D.F.S");
printf("\nENTER YOUR CHOICE");
scanf("%d",&ch);
printf("ENTER THE SOURCE VERTEX :");
scanf("%d",&s);

switch(ch){
case 1:bfs(s,n);
break;
case 2:
dfs(s,n);
break;}
printf("DO U WANT TO CONTINUE(Y/N) ? ");
scanf("%c",&dummy);
scanf("%c",&c);
}while((c=='y')||(c=='Y'));}
//BFS(breadth-first search) code
void bfs(int s,int n){
int p,i;
add(s);
vis[s]=1;
p=delete();
if(p!=-1)   printf(" %d",p);
while(p!=-1){
for(i=0;i<n;i++)
if((adj[p][i]!=0)&&(vis[i]==0)){
add(i);
vis[i]=1;}
p=delete();
if(p!=-1)   printf(" %d ",p);}
for(i=0;i<n;i++)
if(vis[i]==0)
bfs(i,n);}
//Enqueue function
void add(int item){
if(rear==19)
printf("QUEUE FULL");
else{
if(rear==-1){
q[++rear]=item;
front++;}
else
q[++rear]=item;}}

//Function to dequeue
int delete(){
int k;
if((front>rear)||(front==-1))
return(-1);
else{
k=q[front++];
return(k);}}

//DFS(depth-first search) code
void dfs(int i,int n){
    int j;
    vis[i]=1;
    printf(" %d ",i);
    for(j=0;j<n;j++)  {
        if(adj[i][j]==1&&vis[j]==0)
            dfs(j,n);  }}
